#Lazeroid 2.0 by LENAROX
#this script works on all linux devices with init.d support.
#you must have the latest busybox version installed on /system/xbin/ directory to run the script.
#run this with script manager with root for testing, and put it in the init.d folder for daily use.
#Pro-Tuned 3.1 & TurboCache 1.1 & StoneCold-Stablizer 2.0 & Turbo I/O Booster 1.0 copyright by LENAROX.
#scheduler properties tweaks goes first to be applied on boot. 
#unlocks process limits for each "process", leading into a UI boost.
 setprop ENFORCE_PROCESS_LIMIT false
#9 experimental tweaks.
 setprop MAX_SERVICE_INACTIVITY false
 setprop MIN_HIDDEN_APPS false
 setprop MAX_HIDDEN_APPS false
 setprop CONTENT_APP_IDLE_OFFSET false
 setprop EMPTY_APP_IDLE_OFFSET false
 setprop MAX_ACTIVITIES false
 setprop ACTIVITY_INACTIVE_RESET_TIME false
#6 smoothness scrolling tweaks.
#Android maximum 60*1.5 equals 90.
 setprop windowsmgr.max_events_per_sec 90
#mount with noatime thanks to hardcore.
for k in $(busybox mount | grep relatime | cut -d " " -f3)
do
sync busybox mount -o remount,noatime $k
done
#7 Turbo I/O Booster 1.0 tweaks.
#scheduler type.
QUEUE=noop
if [ -e /sys/block/mmcblk0/queue/scheduler ]
then 
 /system/xbin/echo $QUEUE > /sys/block/mmcblk0/queue/scheduler
fi
if [ -e /sys/block/mmcblk1/queue/scheduler ]
then 
 /system/xbin/echo $QUEUE > /sys/block/mmcblk1/queue/scheduler
fi
if [ -e /sys/block/stl10/queue/scheduler ]
then 
 /system/xbin/echo $QUEUE > /sys/block/stl10/queue/scheduler
fi
if [ -e /sys/block/stl11/queue/scheduler ]
then 
 /system/xbin/echo $QUEUE > /sys/block/stl11/queue/scheduler
fi
if [ -e /sys/block/stl9/queue/scheduler ]
then 
 /system/xbin/echo $QUEUE > /sys/block/stl9/queue/scheduler
fi
#read ahead cache size.
READ_AHEAD_KB=128
if [ -e /sys/devices/virtual/bdi/0:18/read_ahead_kb ]
then
 /system/xbin/echo $READ_AHEAD_KB > /sys/devices/virtual/bdi/0:18/read_ahead_kb
fi
if [ -e /sys/devices/virtual/bdi/179:0/read_ahead_kb ]
then
 /system/xbin/echo $READ_AHEAD_KB > /sys/devices/virtual/bdi/179:0/read_ahead_kb
fi
if [ -e /sys/devices/virtual/bdi/179:28/read_ahead_kb ]
then
 /system/xbin/echo $READ_AHEAD_KB > /sys/devices/virtual/bdi/179:28/read_ahead_kb
fi
if [ -e /sys/devices/virtual/bdi/179:33/read_ahead_kb ]
then
 /system/xbin/echo $READ_AHEAD_KB > /sys/devices/virtual/bdi/179:33/read_ahead_kb
fi
if [ -e /sys/devices/virtual/bdi/7:0/read_ahead_kb ]
then
 /system/xbin/echo $READ_AHEAD_KB > /sys/devices/virtual/bdi/7:0/read_ahead_kb
fi
if [ -e /sys/devices/virtual/bdi/7:1/read_ahead_kb ]
then
 /system/xbin/echo $READ_AHEAD_KB > /sys/devices/virtual/bdi/7:1/read_ahead_kb
fi
if [ -e /sys/devices/virtual/bdi/7:2/read_ahead_kb ]
then
 /system/xbin/echo $READ_AHEAD_KB > /sys/devices/virtual/bdi/7:2/read_ahead_kb
fi
if [ -e /sys/devices/virtual/bdi/7:3/read_ahead_kb ]
then
 /system/xbin/echo $READ_AHEAD_KB > /sys/devices/virtual/bdi/7:3/read_ahead_kb
fi
if [ -e /sys/devices/virtual/bdi/7:4/read_ahead_kb ]
then
 /system/xbin/echo $READ_AHEAD_KB > /sys/devices/virtual/bdi/7:4/read_ahead_kb
fi
if [ -e /sys/devices/virtual/bdi/7:5/read_ahead_kb ]
then
 /system/xbin/echo $READ_AHEAD_KB > /sys/devices/virtual/bdi/7:5/read_ahead_kb
fi
if [ -e /sys/devices/virtual/bdi/7:6/read_ahead_kb ]
then
 /system/xbin/echo $READ_AHEAD_KB > /sys/devices/virtual/bdi/7:6/read_ahead_kb
fi
if [ -e /sys/devices/virtual/bdi/7:7/read_ahead_kb ]
then
 /system/xbin/echo $READ_AHEAD_KB > /sys/devices/virtual/bdi/7:7/read_ahead_kb
fi
if [ -e /sys/devices/virtual/bdi/default/read_ahead_kb ]
then
 /system/xbin/echo $READ_AHEAD_KB > /sys/devices/virtual/bdi/default/read_ahead_kb
fi
#kernel vm tweaks goes next to be applied after boot.
#sleeps 90 secs to allow other kernel vm tweaks to pass.
 echo 'sleeping a bit(90s)...'
 sleep 90
 echo 'waking up!'
#1 Pro-Tuned 3.1 tweaks.
#enables kill allocating task to avoid long hangings.
if [ -e /proc/sys/vm/oom_kill_allocating_task ]
then
 /system/xbin/echo 1 > /proc/sys/vm/oom_kill_allocating_task
fi
#makes dirty data stable while sacrificing I/O speed.
if [ -e /proc/sys/vm/dirty_ratio ]
then
 /system/xbin/echo 1 > /proc/sys/vm/dirty_ratio
fi
if [ -e /proc/sys/vm/dirty_background_ratio ]
then
 /system/xbin/echo 2 > /proc/sys/vm/dirty_background_ratio
fi
#2 StoneCold-Stablizer 2.0 tweaks.
#avoids crash by giving a value 0 on crash timer.
if [ -e /proc/sys/vm/panic_on_oom ]
then
 /system/xbin/echo 0 > /proc/sys/vm/panic_on_oom
fi
if [ -e /proc/sys/kernel/panic ]
then 
 /system/xbin/echo 0 > /proc/sys/kernel/panic
fi
if [ -e /proc/sys/kernel/panic_on_oops ]
then 
 /system/xbin/echo 0 > /proc/sys/kernel/panic_on_oops
fi
if [ -e /proc/sys/kernel/hung_task_timeout_secs ]
then 
 /system/xbin/echo 0 > /proc/sys/kernel/hung_task_timeout_secs
fi
if [ -e /proc/sys/kernel/softlockup_panic ]
then 
 /system/xbin/echo 0 > /proc/sys/kernel/softlockup_panic
fi
#3 TurboCache 1.1 tweaks.
#drops temporary page caches to gain more memory.
#increases cache pressure for faster memory gaining.
if [ -e /proc/sys/vm/vfs_cache_pressure ]
then
 /system/xbin/echo 500 > /proc/sys/vm/vfs_cache_pressure
fi
#4 fs file reading related tweaks.
#shortens up reading time.
if [ -e /proc/sys/fs/lease-break-time ]
then 
 /system/xbin/echo 10 > /proc/sys/fs/lease-break-time
fi
#8 battery life saver tweaks.
if [ -e /proc/sys/vm/dirty_writeback_centisecs ]
then
 /system/xbin/echo 2000 > /proc/sys/vm/dirty_writeback_centisecs
fi
if [ -e /proc/sys/vm/dirty_expire_centisecs ]
then
 /system/xbin/echo 1000 > /proc/sys/vm/dirty_expire_centisecs
fi
#go to http://forum.xda-developers.com/showthread.php?t=1978061 for more info.
 exit 0
